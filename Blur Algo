// Blur image
void blur(int height, int width, RGBTRIPLE image[height][width])
{
    RGBTRIPLE sub[height][width];
    //RGBT pixel;
    float avgR, avgB, avgG;
    int totalNeighbors;
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            //Giving default values to avgR, avgB and avgG every time before analyzing the pixel in hand
            avgR = avgB = avgG = 0.0f;
            //For storing the neighbor pixel
            RGBTRIPLE neighbors[9];
            //neighbors array also include the pixel at hand
            neighbors[0] = image[i][j];
            totalNeighbors = 1;
            //Looking for possible Neighbors
            if (i != height - 1)
            {
                neighbors[totalNeighbors++] = image[i+1][j];
                if (j != width - 1)
                {
                    neighbors[totalNeighbors++] = image[i+1][j+1];
                }
                if (j != 0)
                {
                    neighbors[totalNeighbors++] = image[i+1][j-1];
                }
            }
            if (i != 0)
            {
                neighbors[totalNeighbors++] = image[i-1][j];
                if (j != width - 1)
                {
                    neighbors[totalNeighbors++] = image[i-1][j+1];
                }
                if (j != 0)
                {
                    neighbors[totalNeighbors++] = image[i-1][j-1];
                }
            }
            if (j != width - 1)
            {
                neighbors[totalNeighbors++] = image[i][j+1];
            }
            if (j != 0)
            {
                neighbors[totalNeighbors++] = image[i][j-1];
            }
            //Calculating avgR, avgB and avgG from neighbors
            for (int k = 0; k < totalNeighbors; k++)
            {
                avgR += neighbors[k].rgbtRed;
                avgG += neighbors[k].rgbtGreen;
                avgB += neighbors[k].rgbtBlue;
            }
            //Storing average values into sub 2-d array
            sub[i][j].rgbtRed = (int)round(avgR/totalNeighbors);
            sub[i][j].rgbtBlue = (int)round(avgB/totalNeighbors);
            sub[i][j].rgbtGreen = (int)round(avgG/totalNeighbors);
        }
    }
    //Updating the image 2-d array
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            image[i][j] = sub[i][j];
        }
    }
    return;
}
